#!groovy

node {

  step([$class: 'WsCleanup'])

  stage "Checkout Git repo"
    checkout scm

  stage "Checkout additional repos"
    dir("Configuration_management") {
      git "https://github.com/juan-bol/aik-portal-front"
    }

  stage "Run Packer"
    sh "/opt/packer validate -var=\"appVersion=$APP_VERSION\" -var-file=CDelivery/packer/aik-app_vars.json CDelivery/packer/aik-app.json"
    sh "/opt/packer build -machine-readable -var=\"appVersion=$APP_VERSION\" -var-file=CDelivery/packer/aik-app_vars.json CDelivery/packer/aik-app.json | tee CDelivery/packer/packer.log"

  stage "Deploy AMI"

    string amiIdUnFormat = sh returnStdout: true, script:"tail -n1 CDelivery/packer/packer.log | awk '{printf \$NF}' "
    def amiId = amiIdUnFormat.replace("\\n","")
    def ec2Keypair = "devops"
    def secGroup = "sg-08599e13de23cc44c"
    def instanceType = "t2.micro"
    def subnetId = "subnet-0886c90314d0a1c3e"

    sh "tail -n1 CDelivery/packer/packer.log"
    sh "cat CDelivery/packer/packer.log"
    echo "Esto tiene packer.log \$(cat CDelivery/packer/packer.log)"
    echo "Launching an instance from ${amiId}"
    sh "aws ec2 run-instances \
        --region us-west-2 \
        --image-id ${amiId} \
        --key-name ${ec2Keypair} \
        --security-group-ids ${secGroup} \
        --instance-type ${instanceType} \
        --subnet-id ${subnetId} \
        | tee .ec2_run-instances.log \
       "

    
    def instanceId = sh returnStdout: true, script: "printf \$(jq .Instances[0].InstanceId < .ec2_run-instances.log)"

    sh "aws ec2 create-tags --resources ${instanceId} \
        --region us-east-1 \
        --tags Key=Name,Value=\"Jenkins (aik-app-$APP_VERSION)\" Key=CreatedBy,Value=Jenkins \"
    
    echo "Waiting for the instance to come into service"
    aws ec2 wait instance-running --instance-ids ${instanceId}
    sleep 60
    echo "Registering with ELB"
    def elbId = "alb-aik"
    sh "aws elbv2 register-targets \
    --region us-east-1 \
    --target-group-arn arn:aws:elasticloadbalancing:us-east-1:382356559478:targetgroup/alb-aik/8330c53354f19757 \
    --targets Id=${instanceId}"
  stage "Run AB test"
    def elbUri = "alb-aik-1227794311.us-east-1.elb.amazonaws.com"  
    sh "ab -c5 -n1000 -d -S ${elbUri} | tee .ab.log"
    def non2xx = sh returnStdout: true, script:"set -o pipefail;(grep 'Non-2xx' .ab.log | awk '{printf \$NF}') || (printf 0)"
    //def writeErr = sh returnStdout: true, script:"grep 'Write errors' .ab.log | awk '{printf \$NF}'"
    def failedReqs = sh returnStdout: true, script:"grep 'Failed requests' .ab.log | awk '{printf \$NF}'"
    def rps = sh returnStdout: true, script:"grep 'Requests per second' .ab.log | awk '{printf \$4}' | awk -F. '{printf \$1}'"
    def docLen = sh returnStdout: true, script:"grep 'Document Length' .ab.log | awk '{printf \$3}'"
    echo "Non2xx=${non2xx}, FailedReqs=${failedReqs}, ReqsPerSec=${rps}"
    sh "if [ ${non2xx} -gt 10 ] || [ ${failedReqs} -gt 10 ] || [ ${rps} -lt 1000 ]; then \
          echo \"ERR: AB test failed\" | tee -a .error.log; \
        fi \
       "

  stage "Terminate test instance"
    sh "aws ec2 terminate-instances --region us-west-2 --instance-ids ${instanceId}"

  stage "Verify test results"
    sh "if [ -s '.error.log' ]; then \
          cat '.error.log'; \
          :> '.error.log'; \
          exit 100; \
        else \
          echo 'Tests OK'; \
        fi \
       "

    stage "Trigger downstream"
    build job: "aik-cdeployment", parameters: [[$class: "StringParameterValue", name: "AMI_ID", value: "${amiId}"]], wait: false
}